
/**
 *@brief CARGA DATOS DE AUTOS EGRESADOS.
 *@param automovil RECIBE POR PARAMETRO EL VECTOR DE AUTOMOVILES.
 *@param tamAuto RECIBE POR PARAMETRO EL TAMAÑO DEL VECTOR AUTOMOVILES.
 */
void datos_hard_egresos(int tamAuto);

/**
 *@brief SE INGRESA UNA ID, BUSCAMOS SI ESTA EN ALTA.
 * Y SE PROCEDE A DAR DE BAJA EL USUARIO CON TODOS SUS AUTO, COBRANDOLE LAS HORAS QUE ESTUVIERON ESTACIONADOS.
 *@param ePropietario RECIBE POR PARAMETRO EL VECTOR DE PROPIETARIO.
 *@param tamProp RECIBE POR PARAMETRO EL TAMAÑO DEL VECTOR PROPIETARIO.
 *@param automovil RECIBE POR PARAMETRO EL VECTOR DE AUTOMOVILES.
 *@param tamAuto RECIBE POR PARAMETRO EL TAMAÑO DEL VECTOR AUTOMOVILES.
 *@return 0 SI EL PROPIETARIO ES DADO DE BAJA. EN CASO DE UN ERROR RETORNARA UN NUMERO NEGATIVO, SEGUN EL ERROR.
 */
int baja_propietario(ePropietario propietario[], int tamProp, eAuto automovil[], int tamAuto);

/**
 *@brief RECIBE UNA ID Y RECORRE EL VECTOR AUTOS, BUSCANDO LOS AUTOMOVILES QUE LE PERTENECE. AL ENCONTRARLO CALCULA EL VALOR A PAGAR, SEGUN LA HORA QUE HAYA ESTADO ESTACIONADO.
 *@param automovil RECIBE POR PARAMETRO EL VECTOR DE AUTOMOVILES.
 *@param tamAuto RECIBE POR PARAMETRO EL TAMAÑO DEL VECTOR AUTOMOVILES.
 *@param index RECIBE POR PARAMETRO LA ID DEL PROPIETARIO.
 *@param ePropietario RECIBE POR PARAMETRO EL VECTOR DE PROPIETARIO.
 *@return EL TOTAL A PAGAR.
 */
int tarifa(eAuto automovil[], int tamAuto, int index, ePropietario propietario[]);

/**
 *@brief DEVUELVE UN NUMERO ENTERO ENTRE 1 Y 24
 *@return UN NUMERO ENTERO.
 */
int devolverHorasEstadia();

/**
 *@brief SE INGRESA UNA ID DE UN AUTO, SI ESTA EN ALTA, SE RECORRERA EL VECTOR FIJANDOSE QUE MARCA ES.
 * SEGUN QUE MARCA SE LE COBRARA POR LAS HORAS QUE ESTUVO ESTACIONADO. Y SE DARA DE BAJA.
 * SE MOSTRARA UNA LISTA DEL PROPIETARIO CON LOS DATOS DEL AUTO.
 *@param automovil RECIBE POR PARAMETRO EL VECTOR DE AUTOMOVILES.
 *@param tamAuto RECIBE POR PARAMETRO EL TAMAÑO DEL VECTOR AUTOMOVILES.
 *@param ePropietario RECIBE POR PARAMETRO EL VECTOR DE PROPIETARIO.
 *@param tamProp RECIBE POR PARAMETRO EL TAMAÑO DEL VECTOR PROPIETARIO
 *@return 0 SI EL AUTO ES DADO DE BAJA. SINO RETORNARA UN NUMERO NEGATIVO SEGUN EL ERROR QUE HAYA TENIDO.
 */
int baja_auto(eAuto automoviles[], int tamAuto, ePropietario propietario[], int tamProp);

/**
 *@brief MUESTRA UNA VARIABLE DE TIPO FLOAT GLOBAL QUE SE INCREMENTA EN LAS FUNCIONES DONDE SE CALGULE EL TOTAL.
 *@return EL VALOR DE LA VARIABLE.
 */
float recaudacion_Total();

/**
 *@brief MUESTRA 4 VARIABLES DE TIPO FLOAT GLOBALES QUE SE INCREMENTAN EN LAS FUNCIONES DONDE SE CALCULE EL VALOR DE UNA MARCA.
 */
void recaudacion_por_marca();

/**
 *@brief SE INGRESA UNA ID DE UN PROPIETARIO Y CREA UNA LISTA CON EL NOMBRE DEL PROPIETARIO Y LA PATENTE Y MARCA DE SUS AUTOS.
 *@param ePropietario RECIBE POR PARAMETRO EL VECTOR DE PROPIETARIO.
 *@param tamProp RECIBE POR PARAMETRO EL TAMAÑO DEL VECTOR PROPIETARIO.
 *@param automovil RECIBE POR PARAMETRO EL VECTOR DE AUTOMOVILES.
 *@param tamAuto RECIBE POR PARAMETRO EL TAMAÑO DEL VECTOR AUTOMOVILES.
 *@return 0 SI CREA EL LISTADO EXISTOSAMENTE. SINO RETORNA UN NUMERO NEGATIVO SEGUN EL ERROR.
 */
int listado_Propietario_ConAutos(ePropietario propietario[], int tamProp, eAuto automovil[], int tamAuto);

/**
 *@brief CREA UNA LISTA CON TODOS LOS DATOS DE LOS PROPIETARIOS QUE TENGAN UN AUDI ESTACIONADO.
 *@param automovil RECIBE POR PARAMETRO EL VECTOR DE AUTOMOVILES.
 *@param tamAuto RECIBE POR PARAMETRO EL TAMAÑO DEL VECTOR AUTOMOVILES.
 *@param ePropietario RECIBE POR PARAMETRO EL VECTOR DE PROPIETARIO.
 *@param tamProp RECIBE POR PARAMETRO EL TAMAÑO DEL VECTOR PROPIETARIO.
 */
void listado_Audi(eAuto automovil[], int tamAuto, ePropietario propietario[], int tamProp);

/**
 *@brief CREA UN LISTADO DE AUTOS CON SUS PROPIETARIOS ORDENADO POR PATENTE.
 *@param automovil RECIBE POR PARAMETRO EL VECTOR DE AUTOMOVILES.
 *@param tamAuto RECIBE POR PARAMETRO EL TAMAÑO DEL VECTOR AUTOMOVILES.
 *@param ePropietario RECIBE POR PARAMETRO EL VECTOR DE PROPIETARIO.
 */
void listado_por_patente(eAuto automovil[], int tamAuto, ePropietario propietario[]);
